#include "libs/lighting.slib"
#include "libs/skinning.slib"

struct vs_output
{
	float4 position		: SV_POSITION;
	float4 world_pos 	: TEXCOORD0;
	float3 normal		: TEXCOORD1;
	float3 tangent		: TEXCOORD2;
	float3 bitangent	: TEXCOORD3;
	float4 texcoord		: TEXCOORD4;
};

struct vs_output_picking
{
	float4 position		: SV_POSITION;
	float4 index		: TEXCOORD0;
};

struct vs_input
{
	float4 position	 	: POSITION;
	float4 normal	 	: TEXCOORD0;
	float4 texcoord	 	: TEXCOORD1;
	float4 tangent	 	: TEXCOORD2;
	float4 bitangent	: TEXCOORD3;
};

struct vs_input_skinned
{
	float4 position	 		: POSITION;
	float4 normal	 		: TEXCOORD0;
	float4 texcoord	 		: TEXCOORD1;
	float4 tangent	 		: TEXCOORD2;
	float4 bitangent		: TEXCOORD3;
	float4 blend_indices	: TEXCOORD4;
	float4 blend_weights	: TEXCOORD5;
};

struct ps_output
{
	float4 colour : SV_Target;
};

struct ps_output_picking
{
	uint colour : SV_Target;
};

struct ps_output_multi
{
	float4 albedo : SV_Target0;
	float4 normal : SV_Target1;
};

cbuffer per_pass_view : register(b0)
{
	float4x4 vp_matrix;
	float4x4 view_matrix;
};

cbuffer per_draw_call : register(b1)
{
	float4x4 world_matrix;
	float4   user_data; //x = id, yzw = unused
};

cbuffer debug_options : register(b13)
{
	float4 debug_render_options;
};

declare_texture_samplers
{
	TEXTURE_2D( diffuse_texture, 0 );
	TEXTURE_2D( specular_texture, 1 );
	TEXTURE_2D( normal_texture, 2 );
};

vs_output vs_main_skinned( vs_input_skinned _input )
{
	vs_output _output;
	
	float4 sp = skin_pos(_input.position, _input.blend_weights, _input.blend_indices);
	
	_output.position = mul( sp, vp_matrix );
	_output.world_pos = mul( _input.position, world_matrix );
		
	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	
	_output.normal = mul( _input.normal.xyz, rotation_matrix );
	_output.tangent = mul( _input.tangent.xyz, rotation_matrix );
	_output.bitangent = mul( _input.bitangent.xyz, rotation_matrix );
	
	_output.texcoord = float4( _input.texcoord.x, 1.0f - _input.texcoord.y, _input.texcoord.z, 1.0f - _input.texcoord.w );
	
	_output.texcoord = _input.blend_weights;
	
    return _output;
}

vs_output vs_main( vs_input _input )
{
	vs_output _output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	_output.position = mul( _input.position, wvp );
	_output.world_pos = mul( _input.position, world_matrix );
		
	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	
	_output.normal = mul( _input.normal.xyz, rotation_matrix );
	_output.tangent = mul( _input.tangent.xyz, rotation_matrix );
	_output.bitangent = mul( _input.bitangent.xyz, rotation_matrix );
	
	_output.texcoord = float4( _input.texcoord.x, 1.0f - _input.texcoord.y, _input.texcoord.z, 1.0f - _input.texcoord.w );
	
    return _output;
}

vs_output_picking vs_picking( vs_input _input )
{
	vs_output_picking _output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	_output.position = mul( _input.position, wvp );
	_output.index = float4( user_data.x, 0.0, 0.0, 0.0 );
	
	return _output;
}

vs_output_picking vs_picking_skinned( vs_input_skinned _input )
{
	vs_output_picking _output;

	float4 sp = skin_pos(_input.position, _input.blend_weights, _input.blend_indices);
	
	_output.position = mul( sp, vp_matrix );
	_output.index = float4( user_data.x, 0.0, 0.0, 0.0 );
		
	return _output;
}

ps_output_picking ps_picking( vs_output_picking _input ) 
{	
	ps_output_picking _output;
	
	_output.colour = uint(_input.index.x);
	
    return _output;
}

ps_output ps_diffuse( vs_output _input ) 
{	
	ps_output _output;
	
	_output.colour = SAMPLE_TEXTURE_2D( diffuse_texture, _input.texcoord.xy );
	
    return _output;
}

ps_output_multi ps_gbuffer( vs_output _input ) 
{	
	ps_output_multi _output;
	
	_output.albedo = SAMPLE_TEXTURE_2D( diffuse_texture, _input.texcoord.xy );
	_output.normal = float4( _input.normal, 1.0 );
		
    return _output;
}

ps_output ps_debug( vs_output_picking _input ) 
{	
	ps_output_picking _output;
	
	_output.colour = uint(_input.index.x);
	
    return _output;
}


pmfx:
{	
	"diffuse":
	{
		"vs": "vs_main",
		"ps": "ps_diffuse"
	},
	
	"diffuse_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_diffuse"
	},
	
	"picking":
	{
		"vs": "vs_picking",
		"ps": "ps_picking"
	},
	
	"picking_skinned":
	{
		"vs": "vs_picking_skinned",
		"ps": "ps_picking"
	},
	
	"gbuffer":
	{
		"vs": "vs_main",
		"ps": "ps_gbuffer"
	},
	
	"gbuffer_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_gbuffer"
	}
}


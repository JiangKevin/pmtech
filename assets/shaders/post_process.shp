struct vs_output
{
	float4 position		: SV_POSITION;
	float4 texcoord		: TEXCOORD0;
};

struct vs_input
{
	float4 position	 	: POSITION;
	float4 texcoord	 	: TEXCOORD0;
};

struct ps_output
{
	float4 colour : SV_Target;
};

struct ps_output_depth
{
	float4 colour : SV_Target;
	float depth : SV_Depth;
};

declare_texture_samplers
{
	texture_2d( src_texture_0, 0 );
	texture_2d( src_texture_1, 1 );
	texture_2d( src_texture_2, 2 );
	texture_2d( src_texture_3, 3 );
};

cbuffer per_view : register(b0)
{
	float4 viewport_correction;
};

cbuffer src_info : register(b10)
{
	float2 inv_texel_size[8];
};

cbuffer filter_kernel : register(b2)
{
	float4	filter_info; //xy = mask / direction, z = num samples, w = unused
	float4 	filter_offset_weight[16];
};

vs_output vs_ndc_quad( vs_input input )
{
	vs_output output;

	output.position = input.position;
	output.texcoord = input.texcoord;
	
	output.texcoord.y = output.texcoord.y * viewport_correction.x + viewport_correction.y;

	return output;
}

ps_output ps_blit( vs_output input ) 
{
	ps_output output;
	
	output.colour = sample_texture( src_texture_0, input.texcoord.xy );
	return output;
}

ps_output_depth ps_blit_depth( vs_output input ) 
{
	ps_output_depth output;
	
	output.colour = float4(0.0, 0.0, 0.0, 0.0);
	output.depth = sample_texture( src_texture_0, input.texcoord.xy ).r;
	
	return output;
}

ps_output ps_high_pass( vs_output input ) 
{
	ps_output output;
	
	output.colour = sample_texture( src_texture_0, input.texcoord.xy );
	
	float lum = dot( float3(0.2126, 0.7152, 0.0722), output.colour.rgb);
	
	if(lum < 0.7)
		output.colour *= float4(0.0, 0.0, 0.0, 1.0);
			
	return output;
}

ps_output ps_filter( vs_output input ) 
{
	ps_output output;

	float2 inv_texel = inv_texel_size[0];
	
	output.colour = float4(0.0, 0.0, 0.0, 1.0);
	for(int i = 0; i < filter_info.z; ++i)
	{
		float2 offset = filter_offset_weight[i].x * inv_texel * filter_info.xy; 
		float w = filter_offset_weight[i].y;
				
		output.colour += sample_texture( src_texture_0, input.texcoord.xy + offset) * w;
	}
		
	output.colour.a = 1.0;
	return output;
}

ps_output ps_downsample_2x2( vs_output input ) 
{
	ps_output output;

	float2 inv_texel = inv_texel_size[0];
	
	float2 offset[4];
	offset[0] = float2(0.0, 0.0) * inv_texel;
	offset[1] = float2(1.0, 0.0) * inv_texel;
	offset[2] = float2(1.0, 1.0) * inv_texel;
	offset[3] = float2(0.0, 1.0) * inv_texel;
	
	float2 tc = input.texcoord.xy;
	output.colour = float4(0.0, 0.0, 0.0, 1.0);
	output.colour += sample_texture( src_texture_0, tc + offset[0]);
	output.colour += sample_texture( src_texture_0, tc + offset[1]);
	output.colour += sample_texture( src_texture_0, tc + offset[2]);
	output.colour += sample_texture( src_texture_0, tc + offset[3]);
	output.colour *= 0.25;

	return output;
}

ps_output ps_bloom_upsample( vs_output input ) 
{
	ps_output output;

	float2 tc = input.texcoord.xy;
	output.colour = sample_texture( src_texture_0, tc) * 0.5;
	output.colour += sample_texture( src_texture_1, tc) * 0.5;
	
	output.colour += sample_texture( src_texture_2, tc);
	
	return output;
}

pmfx:
{	
	"blit":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_blit"
	},
	
	"blit_depth":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_blit_depth"
	},
	
	"high_pass":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_high_pass",
		
		"constants":
		{
			"threshold": { 
				"type": "float", "widget": "slider", "min": 0, "max": 1, "default": 0.5 
			}
		}
	},
	
	"filter":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_filter"
	},
	
	"downsample_2x2":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_downsample_2x2"
	},
	
	"bloom_upsample":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_bloom_upsample"
	}
}


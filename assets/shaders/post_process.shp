struct vs_output
{
	float4 position		: SV_POSITION;
	float4 texcoord		: TEXCOORD0;
};

struct vs_input
{
	float4 position	 	: POSITION;
	float4 texcoord	 	: TEXCOORD0;
};

struct ps_output
{
	float4 colour : SV_Target;
};

struct ps_output_depth
{
	float4 colour : SV_Target;
	float depth : SV_Depth;
};

declare_texture_samplers
{
	texture_2d( src_texture_0, 0 );
	texture_2d( src_texture_1, 1 );
	texture_2d( src_texture_2, 2 );
	texture_2d( src_texture_3, 3 );
};

cbuffer per_view : register(b0)
{
	float4 viewport_correction;
};

vs_output vs_ndc_quad( vs_input input )
{
	vs_output output;

	output.position = input.position;
	output.texcoord = input.texcoord;
	
	output.texcoord.y = output.texcoord.y * viewport_correction.x + viewport_correction.y;

	return output;
}

ps_output ps_blit( vs_output input ) 
{
	ps_output output;
	
	output.colour = sample_texture( src_texture_0, input.texcoord.xy );
	return output;
}

ps_output_depth ps_blit_depth( vs_output input ) 
{
	ps_output_depth output;
	
	output.colour = float4(0.0, 0.0, 0.0, 0.0);
	output.depth = sample_texture( src_texture_0, input.texcoord.xy ).r;
	
	return output;
}

ps_output ps_high_pass( vs_output input ) 
{
	ps_output output;
	
	output.colour = sample_texture( src_texture_0, input.texcoord.xy );
	
	//float lum = dot( float3(0.299, 0.587, 0.114), output.colour.rgb);
	//output.colour.rgb = float3(lum, lum, lum);
		
	return output;
}

pmfx:
{	
	"blit":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_blit"
	},
	
	"blit_depth":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_blit_depth"
	},
	
	"high_pass":
	{
		"vs": "vs_ndc_quad",
		"ps": "ps_high_pass"
	}
}


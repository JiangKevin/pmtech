#include "libs/lighting.slib"
#include "libs/skinning.slib"
#include "libs/globals.slib"
#include "libs/maths.slib"

// Structs -----------------------------------------------------------------------------------------------------------


struct vs_output
{
	float4 position		: SV_POSITION;
	float4 world_pos 	: TEXCOORD0;
	float3 normal		: TEXCOORD1;
	float3 tangent		: TEXCOORD2;
	float3 bitangent	: TEXCOORD3;
	float4 texcoord		: TEXCOORD4;
};

struct vs_output_picking
{
	float4 position		: SV_POSITION;
	float4 index		: TEXCOORD0;
};

struct vs_input
{
	float4 position	 	: POSITION;
	float4 normal	 	: TEXCOORD0;
	float4 texcoord	 	: TEXCOORD1;
	float4 tangent	 	: TEXCOORD2;
	float4 bitangent	: TEXCOORD3;
};

struct vs_input_skinned
{
	float4 position	 		: POSITION;
	float4 normal	 		: TEXCOORD0;
	float4 texcoord	 		: TEXCOORD1;
	float4 tangent	 		: TEXCOORD2;
	float4 bitangent		: TEXCOORD3;
	float4 blend_indices	: TEXCOORD4;
	float4 blend_weights	: TEXCOORD5;
};

struct vs_instance_input
{
	float4 world_matrix_0	 : TEXCOORD6;
	float4 world_matrix_1	 : TEXCOORD7;
	float4 world_matrix_2	 : TEXCOORD8;
	float4 world_matrix_3	 : TEXCOORD9;
	float4 user_data	 	 : TEXCOORD10;
	float4 user_data2	 	 : TEXCOORD11;
};

struct ps_output
{
	float4 colour : SV_Target;
};

struct ps_output_picking
{
	uint colour : SV_Target;
};

struct ps_output_multi
{
	float4 albedo : SV_Target0;
	float4 normal : SV_Target1;
};

// Textures ----------------------------------------------------------------------------------------------------------------

declare_texture_samplers
{
	texture_2d( diffuse_texture, 0 );
	texture_2d( normal_texture, 1 );
	texture_2d( specular_texture, 2 );
	
	texture_cube( cubemap_texture, 3 );
	texture_3d( volume_texture, 4 );
};

// Vertex Shaders -----------------------------------------------------------------------------------------------------------

vs_output vs_main_skinned( vs_input_skinned input )
{
	vs_output output;
	
	float4 sp = skin_pos(input.position, input.blend_weights, input.blend_indices);
	
	output.position = mul( sp, vp_matrix );
	output.world_pos = mul( input.position, world_matrix );
		
	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
	
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, input.texcoord.z, 1.0f - input.texcoord.w );
	
	output.texcoord = input.blend_weights;
	
    return output;
}

vs_output vs_main( vs_input input )
{
	vs_output output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	output.position = mul( input.position, wvp );
	output.world_pos = mul( input.position, world_matrix );
		
	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
	
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, input.texcoord.z, 1.0f - input.texcoord.w );
	
    return output;
}

vs_output_picking vs_picking( vs_input input )
{
	vs_output_picking output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	output.position = mul( input.position, wvp );
	output.index = float4( user_data.x, 0.0, 0.0, 0.0 );
	
	return output;
}

vs_output_picking vs_picking_skinned( vs_input_skinned input )
{
	vs_output_picking output;

	float4 sp = skin_pos(input.position, input.blend_weights, input.blend_indices);
	
	output.position = mul( sp, vp_matrix );
	output.index = float4( user_data.x, 0.0, 0.0, 0.0 );
		
	return output;
}

vs_output_picking vs_picking_instanced( vs_input input, vs_instance_input instance_input )
{
	vs_output_picking output;
	
	float4x4 instance_world_mat;
	unpack_vb_instance_mat(instance_world_mat, 
		instance_input.world_matrix_0, 
		instance_input.world_matrix_1, 
		instance_input.world_matrix_2, 
		instance_input.world_matrix_3);
		
	float4x4 wvp = mul( instance_world_mat, vp_matrix );
	
	output.position = mul( input.position, wvp );
	output.index = float4( instance_input.user_data.x, 0.0, 0.0, 0.0 );
				
    return output;
}

vs_output vs_main_volume_texture( vs_input input )
{
	vs_output output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	output.position = mul( input.position, wvp );
	output.world_pos = mul( input.position, world_matrix );
		
	output.normal = input.normal.xyz;
	output.tangent = input.tangent.xyz;
	output.bitangent = input.bitangent.xyz;
	
	output.texcoord = input.position;
		
    return output;
}

// Pixel Shaders -----------------------------------------------------------------------------------------------------------

ps_output_picking ps_picking( vs_output_picking input ) 
{	
	ps_output_picking output;
		
	output.colour = uint(input.index.x + 0.5);
	
    return output;
}

ps_output ps_diffuse( vs_output input ) 
{	
	ps_output output;
	
	output.colour = sample_texture( diffuse_texture, input.texcoord.xy );
	
    return output;
}

ps_output ps_vertex_normals( vs_output input ) 
{	
	ps_output output;
	
	output.colour.rgb = input.normal * 0.5 + 0.5;
	output.colour.a = 1.0;
	
    return output;
}

ps_output ps_debug( vs_output_picking input ) 
{	
	ps_output_picking output;
	
	output.colour = uint(input.index.x);
	
    return output;
}

ps_output ps_cubemapped( vs_output input ) 
{
	ps_output output;
	
	output.colour = sample_texture( cubemap_texture, normalize(input.world_pos.xyz));
	
	return output;
}

ps_output ps_constant_colour( vs_output input ) 
{
	ps_output output;
	output.colour = float4( user_data2.rgb, 1.0 );
	
	return output;	
}

ps_output ps_volume_texture( vs_output input ) 
{
	ps_output output;
	
	float3 v = input.texcoord.xyz;
		
	float3 chebyshev_norm = chebyshev_normalize(v);
	
	float3 uvw = chebyshev_norm * 0.5 + 0.5;
	float depth = 1.0;
	
	float max_samples = 256.0;
	
	float4 ray_dir = float4( normalize(input.world_pos.xyz - camera_view_pos.xyz), 1.0 );
				
	//transform ray into volume space
	ray_dir = mul( world_matrix_inv_transpose, ray_dir );
		
	float3 ray_step = chebyshev_normalize(ray_dir.xyz) / max_samples;
				
	float depth_step = 1.0 / max_samples;
	
	float3 vddx = ddx( uvw );
	float3 vddy = ddy( uvw );
	
	for( int s = 0; s < int(max_samples); ++s )
	{		
		output.colour = sample_texture_grad( volume_texture, uvw, vddx, vddy );
		
		if(output.colour.a != 0.0)
			break;
		
		depth -= depth_step;
		uvw += ray_step;
		
		if(uvw.x > 1.0 || uvw.x < 0.0)
			discard;
			
		if(uvw.y > 1.0 || uvw.y < 0.0)
			discard;
			
		if(uvw.z > 1.0 || uvw.z < 0.0)
			discard;
		
		if( s == max_samples-1)
			discard;
	}
	
	output.colour.rgb *= lerp( 0.5, 1.0, depth );
		
	return output;
}

ps_output ps_volume_sdf( vs_output input ) 
{
	ps_output output;
	
	float3 v = input.texcoord.xyz;
	float3 chebyshev_norm = chebyshev_normalize(v);
	float3 uvw = chebyshev_norm * 0.5 + 0.5;
	
	float max_samples = 32.0;
	
	float4 ray_dir = float4( normalize(input.world_pos.xyz - camera_view_pos.xyz), 1.0 );
				
	//transform ray into volume space
	float4x4 inv_rot = world_matrix_inv_transpose;
	inv_rot[0].w = 0.0;
	inv_rot[1].w = 0.0;
	inv_rot[2].w = 0.0;
	inv_rot[3].xyzw = float4(0.0, 0.0, 0.0, 1.0 );
	
	ray_dir = mul( inv_rot, ray_dir );
	ray_dir.xyz = normalize(ray_dir.xyz);
					
	float3 vddx = ddx( uvw );
	float3 vddy = ddy( uvw );
	
	float d;
	
	d = sample_texture_grad( volume_texture, uvw, vddx, vddy ).r;
	
	float3 col = float3( 0.0, 0.0, 0.0 );
	
	float3 ray_pos = input.world_pos.xyz;
	
	float taken = 0.0;
	
	for( int s = 0; s < int(max_samples); ++s )
	{		
		taken += 1.0/max_samples;
		
		//uvw = mul(world_matrix_inv_transpose, vec4(ray_pos, 1.0)).xyz;
		//uvw = uvw * 0.5 + 0.5;
		//d = sample_texture_grad( volume_texture, uvw, vddx, vddy ).r;
		//ray_pos += ray_dir.xyz * d * 0.8;
		
		d = sample_texture_grad(volume_texture, uvw, vddx, vddy).r;
		uvw += ray_dir.xyz * (d / (3.37*2.0)) * 0.9;				
		
		if( s == 0 )
			continue;
			
		if( d <= 0.0 )	
			break;
										
		if(uvw.x >= 1.0 || uvw.x <= 0.0)
			discard;
		
		if(uvw.y >= 1.0 || uvw.y <= 0.0)
			discard;
		
		if(uvw.z >= 1.0 || uvw.z <= 0.0)
			discard;
	}
	
	float vd = (1.0 - d);
	output.colour.rgb = float3(vd*vd,vd*vd, vd*vd);
	output.colour.rgb = float3(taken, taken, taken);
	
	return output;
}

ps_output ps_shadow_sdf( vs_output input ) 
{
	ps_output output;
	
	output.colour = float4(0.0, 0.0, 0.0, 1.0);
	
	float3 albedo = float3( 1.0, 1.0, 1.0 );
	
	float max_samples = 32.0;
	
	float3 v = input.texcoord.xyz;
	float3 chebyshev_norm = chebyshev_normalize(v);
	
	float3 light_pos = lights[0].pos_radius.xyz;
	
	float3 rv = normalize(light_pos);
	float3 r1 = input.world_pos.xyz;
	
	float3 emin = float3(-1.0, -1.0, -1.0);
	float3 emax = float3(1.0, 1.0, 1.0);
	
	float4x4 inv_rot = sdf_shadow.world_matrix_inv;
	inv_rot[0].w = 0.0;
	inv_rot[1].w = 0.0;
	inv_rot[2].w = 0.0;
	inv_rot[3].xyzw = float4(0.0, 0.0, 0.0, 1.0 );
	
	//transform into obb
	float3 trv = mul( float4(rv, 1.0), inv_rot ).xyz;
	float3 tr1 = mul( float4(r1, 1.0), sdf_shadow.world_matrix_inv ).xyz;
	
	float3 ip;
	bool hit = ray_vs_aabb( emin, emax, tr1, normalize(trv), ip);
	
	float length_to_box = length( tr1 - ip ) / 5.0;
	
	float3 uvw = ip * 0.5 + 0.5;
	float3 vddx = ddx( uvw );
	float3 vddy = ddy( uvw );
		
	for( int i = 0; i < light_info.x; ++i )
	{
		float3 light_col = float3( 0.0, 0.0, 0.0 );
					
		light_col += lambert(lights[i].pos_radius,
							 lights[i].colour.rgb,
							 input.normal.xyz,
							 input.world_pos.xyz,
							 albedo.rgb);
		
		output.colour.rgb += light_col; 	
		
		float4 ray_dir = float4( normalize(lights[i].pos_radius.xyz - input.world_pos.xyz), 1.0 );
							 
		ray_dir = mul( ray_dir, inv_rot );
		ray_dir.xyz = normalize(ray_dir.xyz);		
		
		float shad = 1.0;
		float closest = 1.0;

		for( int s = 0; s < int(max_samples); ++s )
		{		
			float d = sample_texture_grad( volume_texture, uvw, vddx, vddy ).r;
					
			uvw += ray_dir.xyz * (d/1.65) * 0.9;
			
			closest = min(d, closest);
		
			if( d <= 0.0 )
			{			
				closest = 0;
				shad = max( d, 0.0 );
				break;
			}

			if(uvw.x >= 1.0 || uvw.x < 0.0)
				break;
		
			if(uvw.y >= 1.0 || uvw.y < 0.0)
				break;
		
			if(uvw.z >= 1.0 || uvw.z < 0.0)
				break;
		}
		
		if( hit )
			output.colour *= smoothstep( 0.0, 0.02, closest);
	}
				
	return output;
}

ps_output ps_area_box_light( vs_output input ) 
{
	ps_output output;
	
	output.colour = float4(0.0, 0.0, 0.0, 1.0);
	
	float3 albedo = float3( 1.0, 1.0, 1.0 );
	
	float max_samples = 64.0;
	
	float3 v = input.texcoord.xyz;
	float3 chebyshev_norm = chebyshev_normalize(v);
	
	float3 light_pos = lights[0].pos_radius.xyz;
	
	float3 view_v = normalize(input.world_pos.xyz - camera_view_pos.xyz);
	float3 refl = reflect(view_v, input.normal);
	
	float3 cp = closest_point_on_obb(area_lights.world_matrix, area_lights.world_matrix_inv, input.world_pos.xyz);
	
	float diff = saturate(dot(-normalize(input.world_pos.xyz-cp), input.normal));
	
	float3 rv = normalize(refl);
	float3 r1 = input.world_pos.xyz;
	
	float3 ip, bp, rp;
	bool hit = ray_vs_obb_ex(area_lights.world_matrix, area_lights.world_matrix_inv, r1, rv, ip, bp, rp);
	
	float wd = length(input.world_pos.xyz-rp)/100;
	
	float dp2 = dot(normalize(input.world_pos.xyz-cp), refl);
	
	float n_dot_v = dot(input.normal, -view_v);
	
	float n_dot_l = saturate( dot(normalize(cp-input.world_pos.xyz), input.normal) );
		
	float s = lerp(0.01, 10.0, wd);
	
	float d = 1.0 - length(bp-rp) / s;
	
	if(n_dot_l <= 0.0)
		d = 0.0;

	float mask = 1.0 - saturate(dp2);
	
	float light = diff; //saturate(d + diff);
		
	output.colour = float4( light, light, light, 1.0);
	
	return output;
}

pmfx:
{	
	"constant_colour":
	{
		"vs": "vs_main",
		"ps": "ps_constant_colour"
	},
	
	"diffuse":
	{
		"vs": "vs_main",
		"ps": "ps_diffuse"
	},
	
	"vertex_normals":
	{
		"vs": "vs_main",
		"ps": "ps_vertex_normals"
	},
	
	"diffuse_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_diffuse"
	},
	
	"cubemap":
	{
		"vs": "vs_main",
		"ps": "ps_cubemapped"
	},
	
	"volume_texture":
	{
		"vs": "vs_main_volume_texture",
		"ps": "ps_volume_texture"
	},
	
	"volume_sdf":
	{
		"vs": "vs_main_volume_texture",
		"ps": "ps_volume_sdf"
	},
	
	"shadow_sdf":
	{
		"vs": "vs_main_volume_texture",
		"ps": "ps_shadow_sdf"
	},
	
	"area_box_light":
	{
		"vs": "vs_main_volume_texture",
		"ps": "ps_area_box_light"
	},
	
	"picking":
	{
		"vs": "vs_picking",
		"ps": "ps_picking"
	},
	
	"picking_skinned":
	{
		"vs": "vs_picking_skinned",
		"ps": "ps_picking"
	},
	
	"picking_instanced":
	{
		"vs": "vs_picking_instanced",
		"ps": "ps_picking"
	},
	
	"volume_raster_albedo":
	{
		"vs": "vs_main",
		"ps": "ps_diffuse"
	}
}
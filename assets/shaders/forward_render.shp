#include "libs/lighting.slib"
#include "libs/skinning.slib"

struct vs_output
{
	float4 position		: SV_POSITION;
	float4 world_pos 	: TEXCOORD0;
	float3 normal		: TEXCOORD1;
	float3 tangent		: TEXCOORD2;
	float3 bitangent	: TEXCOORD3;
	float4 texcoord		: TEXCOORD4;
	float4 colour		: TEXCOORD5;
};

struct vs_output_pre_skin
{
	float4 vb_position	: TEXCOORD0;
	float4 normal		: TEXCOORD1;
	float4 tangent		: TEXCOORD2;
	float4 bitangent	: TEXCOORD3;
	float4 texcoord		: TEXCOORD4;
};

struct vs_output_zonly
{
	float4 position		: SV_POSITION;
};

struct vs_output_picking
{
	float4 position		: SV_POSITION;
	float4 index		: TEXCOORD0;
};

struct vs_input
{
	float4 position	 	: POSITION;
	float4 normal	 	: TEXCOORD0;
	float4 texcoord	 	: TEXCOORD1;
	float4 tangent	 	: TEXCOORD2;
	float4 bitangent	: TEXCOORD3;
};

struct vs_input_skinned
{
	float4 position	 		: POSITION;
	float4 normal	 		: TEXCOORD0;
	float4 texcoord	 		: TEXCOORD1;
	float4 tangent	 		: TEXCOORD2;
	float4 bitangent		: TEXCOORD3;
	float4 blend_indices	: TEXCOORD4;
	float4 blend_weights	: TEXCOORD5;
};

struct vs_instance_input
{
	float4 world_matrix_0	 : TEXCOORD6;
	float4 world_matrix_1	 : TEXCOORD7;
	float4 world_matrix_2	 : TEXCOORD8;
	float4 world_matrix_3	 : TEXCOORD9;
	float4 user_data	 	 : TEXCOORD10;
	float4 user_data2	 	 : TEXCOORD11;
};

struct ps_output
{
	float4 colour : SV_Target;
};

struct ps_output_picking
{
	uint colour : SV_Target;
};

struct ps_output_multi
{
	float4 albedo : SV_Target0;
	float4 normal : SV_Target1;
};

cbuffer per_pass_view : register(b0)
{
	float4x4 vp_matrix;
	float4x4 view_matrix;
	float4 camera_view_pos;
	float4 camera_view_dir;
};

cbuffer per_draw_call : register(b1)
{
	float4x4 world_matrix;
	float4   user_data; 	//x = id, y roughness, z reflectivity
	float4   user_data2; 	//rgba colour
};

struct forward_light
{
	float4 pos_radius;
	float4 colour;
};

cbuffer per_pass_lights : register(b3)
{
	forward_light lights[8];
	float4 		  light_info;
};

cbuffer per_pass_shadow : register(b4)
{
	float4x4 shadow_matrix; 
};

declare_texture_samplers
{
	texture_2d( diffuse_texture, 0 );
	texture_2d( normal_texture, 1 );
	texture_2d( specular_texture, 2 );	
	
	texture_2d( shadowmap_texture, 15 );
};

vs_output_zonly vs_main_zonly( vs_input input )
{
	vs_output_zonly output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	output.position = mul( input.position, wvp );
	
	//output.position.z = remap_depth(output.position.z);
	
	return output;
}

vs_output vs_main_skinned( vs_input_skinned input )
{
	vs_output output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	float4 sp = skin_pos(input.position, input.blend_weights, input.blend_indices);
	
	output.position = mul( sp, vp_matrix );
	output.world_pos = sp;
	
	float3x3 world_rot_mat = to_3x3(world_matrix);
	world_rot_mat[0] = normalize(world_rot_mat[0]);
	world_rot_mat[1] = normalize(world_rot_mat[1]);
	world_rot_mat[2] = normalize(world_rot_mat[2]);
	
	float3x3 rotation_matrix = mul( world_rot_mat, to_3x3(view_matrix) );
	float3x3 ws_rotation_matrix = world_rot_mat;
	
	rotation_matrix = ws_rotation_matrix;
	
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
	
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, 
		input.texcoord.z, 1.0f - input.texcoord.w );
		
	output.colour = user_data2;
	
    return output;
}

vs_output_pre_skin vs_main_pre_skin( vs_input_skinned input )
{
	vs_output_pre_skin output;
	
	float4 sp = skin_pos(input.position, input.blend_weights, input.blend_indices);
	
	output.vb_position = sp;
	output.normal = input.normal;
	output.tangent = input.tangent;
	output.bitangent = input.tangent;
	output.texcoord = input.texcoord;
		
    return output;
}

vs_output vs_main( vs_input input )
{
	vs_output output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	output.position = mul( input.position, wvp );
	output.world_pos = mul( input.position, world_matrix );
	
	float3x3 world_rot_mat = to_3x3(world_matrix);
	world_rot_mat[0] = normalize(world_rot_mat[0]);
	world_rot_mat[1] = normalize(world_rot_mat[1]);
	world_rot_mat[2] = normalize(world_rot_mat[2]);
		
	float3x3 rotation_matrix = mul( world_rot_mat, to_3x3(view_matrix) );
	float3x3 ws_rotation_matrix = world_rot_mat;
		
	rotation_matrix = ws_rotation_matrix;
		
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
		
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, 
		input.texcoord.z, 1.0f - input.texcoord.w );
		
	output.colour = user_data2;
		
    return output;
}

vs_output vs_main_instanced( vs_input input, vs_instance_input instance_input )
{
	vs_output output;
	
	float4x4 instance_world_mat;
	unpack_vb_instance_mat(instance_world_mat, 
		instance_input.world_matrix_0, 
		instance_input.world_matrix_1, 
		instance_input.world_matrix_2, 
		instance_input.world_matrix_3);
		
	float4x4 wvp = mul( instance_world_mat, vp_matrix );
	
	output.position = mul( input.position, wvp );
	output.world_pos = mul( input.position, instance_world_mat );
		
	float3x3 rotation_matrix = mul( to_3x3(instance_world_mat), to_3x3(view_matrix) );
	float3x3 ws_rotation_matrix = to_3x3(instance_world_mat);
		
	rotation_matrix = ws_rotation_matrix;
		
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
				
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, 
		input.texcoord.z, 1.0f - input.texcoord.w );
	
	output.colour = instance_input.user_data2;
		
    return output;
}

float3 transform_ts_normal( float3 t, float3 b, float3 n, float3 ts_normal )
{
	float3x3 tbn;
	tbn[0] = float3(t.x, b.x, n.x);
	tbn[1] = float3(t.y, b.y, n.y);
	tbn[2] = float3(t.z, b.z, n.z);
	
	return normalize( mul_tbn( tbn, ts_normal ) );
}

ps_output ps_forward_lit( vs_output input ) 
{	
	ps_output output;
		
	float4 albedo = sample_texture( diffuse_texture, input.texcoord.xy );
		
	float3 normal_sample = sample_texture( normal_texture, input.texcoord.xy ).rgb;
	normal_sample = normal_sample * 2.0 - 1.0;
	
	float4 specular_sample = sample_texture( specular_texture, input.texcoord.xy );
		
	float3 n = transform_ts_normal( 
		input.tangent, 
		input.bitangent, 
		input.normal, 
		normal_sample );
		
	albedo *= input.colour;
	
	float3 lit_colour = float3( 0.0, 0.0, 0.0 );
		
	//todo these need to be passed from vs for instancing
	float single_roughness = saturate(user_data.y); 
	float reflectivity = saturate(user_data.z);
	
	//for directional lights
	for( int i = 0; i < light_info.x; ++i )
	{
		float3 light_col = float3( 0.0, 0.0, 0.0 );
		
		light_col += cook_torrence( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			camera_view_pos.xyz,
			albedo.rgb,
			specular_sample.rgb,
			single_roughness,
			reflectivity
		);	
		
		light_col += oren_nayar( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			camera_view_pos.xyz,
			single_roughness,
			albedo.rgb
		);		
		
		if( lights[i].colour.a == 0.0 )
		{
			lit_colour += light_col;
			continue;
		}
		else
		{
			float4 sp = mul( input.world_pos, shadow_matrix );
			sp.xyz /= sp.w;
			sp.y *= -1.0;
			sp.xy = sp.xy * 0.5 + 0.5;
			sp.z = remap_depth(sp.z);
			
			float d = sample_texture( shadowmap_texture, sp.xy ).r;
			float shadow = sp.z < d ? 1.0 : 0.0;
			lit_colour += light_col * shadow;
		}
	}
	
	//for point lights
	int point_start = int(light_info.x);
	int point_end =  int(light_info.x) + int(light_info.y);
	for( int i = point_start; i < point_end; ++i )
	{
		float3 light_col = float3( 0.0, 0.0, 0.0 );
		
		light_col += cook_torrence( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			camera_view_pos.xyz,
			albedo.rgb,
			specular_sample.rgb,
			single_roughness,
			reflectivity
		);	
		
		light_col += oren_nayar( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			camera_view_pos.xyz,
			single_roughness,
			albedo.rgb
		);		
			
		float a = point_light_attenuation( lights[i].pos_radius, input.world_pos.xyz );	
		light_col *= a;
		
		lit_colour += light_col;
	}

	output.colour.rgb = lit_colour.rgb;
	output.colour.a = albedo.a;
	
    return output;
}

ps_output ps_constant_colour( vs_output input ) 
{
	ps_output output;
	output.colour = float4( 1.0, 1.0, 1.0, 1.0 );
	
	return output;
	
}

ps_output_multi ps_gbuffer( vs_output input ) 
{	
	ps_output_multi output;
	
	float4 albedo = sample_texture( diffuse_texture, input.texcoord.xy );
	float3 normal_sample = sample_texture( normal_texture, input.texcoord.xy ).rgb;
	normal_sample = normal_sample * 2.0 - 1.0;
	
	float3 n = transform_ts_normal( 
		input.tangent, 
		input.bitangent, 
		input.normal, 
		normal_sample );
	
	output.albedo = albedo;
	output.normal = float4( n, 1.0 );
	
    return output;
}

void ps_null( vs_output_zonly input )
{
	//stub
	return;
}

pmfx:
{	
	"pre_skin":
	{
		"vs": "vs_main_pre_skin",
		"stream_out": "true"
	},
	
	"forward_lit":
	{
		"vs": "vs_main",
		"ps": "ps_forward_lit"
	},
	
	"forward_lit_instanced":
	{
		"vs": "vs_main_instanced",
		"ps": "ps_forward_lit"
	},
	
	"forward_lit_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_forward_lit"
	},
	
	"constant_colour":
	{
		"vs": "vs_main",
		"ps": "ps_constant_colour"
	},
	
	"zonly":
	{
		"vs": "vs_main_zonly",
		"ps": "ps_null"
	},
	
	"gbuffer":
	{
		"vs": "vs_main",
		"ps": "ps_gbuffer"
	},
	
	"gbuffer_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_gbuffer"
	}
}


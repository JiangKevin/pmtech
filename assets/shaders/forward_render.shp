#include "libs/lighting.slib"
#include "libs/skinning.slib"

struct vs_output
{
	float4 position		: SV_POSITION;
	float4 world_pos 	: TEXCOORD0;
	float3 normal		: TEXCOORD1;
	float3 tangent		: TEXCOORD2;
	float3 bitangent	: TEXCOORD3;
	float4 texcoord		: TEXCOORD4;
};

struct vs_output_picking
{
	float4 position		: SV_POSITION;
	float4 index		: TEXCOORD0;
};

struct vs_input
{
	float4 position	 	: POSITION;
	float4 normal	 	: TEXCOORD0;
	float4 texcoord	 	: TEXCOORD1;
	float4 tangent	 	: TEXCOORD2;
	float4 bitangent	: TEXCOORD3;
};

struct vs_input_skinned
{
	float4 position	 		: POSITION;
	float4 normal	 		: TEXCOORD0;
	float4 texcoord	 		: TEXCOORD1;
	float4 tangent	 		: TEXCOORD2;
	float4 bitangent		: TEXCOORD3;
	float4 blend_indices	: TEXCOORD4;
	float4 blend_weights	: TEXCOORD5;
};

struct vs_instance_input
{
	float4 world_matrix_0	 : TEXCOORD6;
	float4 world_matrix_1	 : TEXCOORD7;
	float4 world_matrix_2	 : TEXCOORD8;
	float4 world_matrix_3	 : TEXCOORD9;
	float4 user_data	 	 : TEXCOORD10;
	float4 user_data2	 	 : TEXCOORD11;
};

struct ps_output
{
	float4 colour : SV_Target;
};

struct ps_output_picking
{
	uint colour : SV_Target;
};

struct ps_output_multi
{
	float4 albedo : SV_Target0;
	float4 normal : SV_Target1;
};

cbuffer per_pass_view : register(b0)
{
	float4x4 vp_matrix;
	float4x4 view_matrix;
	float4 camera_view_pos;
	float4 camera_view_dir;
};

cbuffer per_draw_call : register(b1)
{
	float4x4 world_matrix;
	float4   user_data; 	//x = id, y roughness, z reflectivity
	float4   user_data2; 	//rgba colour
};

struct forward_light
{
	float4 pos_radius;
	float4 colour;
};

cbuffer per_pass_lights : register(b3)
{
	forward_light lights[8];
	float4 		  light_info;
};

declare_texture_samplers
{
	TEXTURE_2D( diffuse_texture, 0 );
	TEXTURE_2D( normal_texture, 1 );
	TEXTURE_2D( specular_texture, 2 );	
};

vs_output vs_main_skinned( vs_input_skinned input )
{
	vs_output output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	float4 sp = skin_pos(input.position, input.blend_weights, input.blend_indices);
	
	output.position = mul( sp, vp_matrix );
	output.world_pos = mul( input.position, world_matrix );
		
	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	float3x3 ws_rotation_matrix = to_3x3(world_matrix);
	
	rotation_matrix = ws_rotation_matrix;
	
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
	
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, input.texcoord.z, 1.0f - input.texcoord.w );
	
    return output;
}

vs_output vs_main( vs_input input )
{
	vs_output output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	output.position = mul( input.position, wvp );
	output.world_pos = mul( input.position, world_matrix );
		
	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	float3x3 ws_rotation_matrix = to_3x3(world_matrix);
		
	rotation_matrix = ws_rotation_matrix;
		
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
		
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, input.texcoord.z, 1.0f - input.texcoord.w );
	
    return output;
}

vs_output vs_main_instanced( vs_input input, vs_instance_input instance_input )
{
	vs_output output;
	
	float4x4 instance_world_mat;
	unpack_vb_instance_mat(instance_world_mat, instance_input.world_matrix_0, instance_input.world_matrix_1, instance_input.world_matrix_2, instance_input.world_matrix_3);
		
	float4x4 wvp = mul( instance_world_mat, vp_matrix );
	
	output.position = mul( input.position, wvp );
	output.world_pos = mul( input.position, instance_world_mat );
		
	float3x3 rotation_matrix = mul( to_3x3(instance_world_mat), to_3x3(view_matrix) );
	float3x3 ws_rotation_matrix = to_3x3(instance_world_mat);
		
	rotation_matrix = ws_rotation_matrix;
		
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
				
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, input.texcoord.z, 1.0f - input.texcoord.w );
	
    return output;
}

float3 transform_ts_normal( float3 t, float3 b, float3 n, float3 ts_normal )
{
	float3x3 tbn;
	tbn[0] = float3(t.x, b.x, n.x);
	tbn[1] = float3(t.y, b.y, n.y);
	tbn[2] = float3(t.z, b.z, n.z);
	
	return normalize( mul_tbn( tbn, ts_normal ) );
}

ps_output ps_forward_lit( vs_output input ) 
{	
	ps_output output;
	
	float4 albedo = SAMPLE_TEXTURE_2D( diffuse_texture, input.texcoord.xy );	
	float3 normal_sample = SAMPLE_TEXTURE_2D( normal_texture, input.texcoord.xy ).rgb * 2.0 - 1.0;
	float4 specular_sample = SAMPLE_TEXTURE_2D( specular_texture, input.texcoord.xy );
		
	float3 n = transform_ts_normal( input.tangent, input.bitangent, input.normal, normal_sample );
	
	float3 lit_colour = float3( 0.0, 0.0, 0.0 );
	
	for( int i = 0; i < light_info.x; ++i )
	{
		float single_roughness = saturate(user_data.y); 
		//float reflectivity = 1.0 - single_roughness;
		
		float reflectivity = saturate(user_data.z);
#if 0
		lit_colour += lambert( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			albedo.rgb
		);			 
#endif

#if 0
		lit_colour += phong( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			camera_view_pos.xyz,
			albedo.rgb,
			(1.0 - single_roughness) * 100.0,
			reflectivity
		);			 
#endif

#if 0
		lit_colour += blinn( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			camera_view_pos.xyz,
			albedo.rgb,
			(1.0 - single_roughness) * 100.0,
			reflectivity
		);			 
#endif

#if 1
		lit_colour += cook_torrence( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			camera_view_pos.xyz,
			albedo.rgb,
			specular_sample.rgb,
			single_roughness,
			reflectivity
		);			 
#endif

#if 1
		lit_colour += oren_nayar( 
			lights[i].pos_radius, 
			lights[i].colour.rgb,
			n,
			input.world_pos.xyz,
			camera_view_pos.xyz,
			single_roughness,
			albedo.rgb
		);			 
#endif
	}
	
	output.colour.rgb = lit_colour.rgb;
	output.colour.a = albedo.a;
	
    return output;
}

ps_output ps_constant_colour( vs_output input ) 
{
	ps_output output;
	output.colour = float4( 1.0, 1.0, 1.0, 1.0 );
	
	return output;
}

ps_output_multi ps_gbuffer( vs_output input ) 
{	
	ps_output_multi output;
	
	float4 albedo = SAMPLE_TEXTURE_2D( diffuse_texture, input.texcoord.xy );
	float3 normal_sample = SAMPLE_TEXTURE_2D( normal_texture, input.texcoord.xy ).rgb * 2.0 - 1.0;
	
	float3 n = transform_ts_normal( input.tangent, input.bitangent, input.normal, normal_sample );
	
	output.albedo = albedo;
	output.normal = float4( n, 1.0 );
	
    return output;
}

pmfx:
{	
	"forward_lit":
	{
		"vs": "vs_main",
		"ps": "ps_forward_lit"
	},
	
	"forward_lit_instanced":
	{
		"vs": "vs_main_instanced",
		"ps": "ps_forward_lit"
	},
	
	"forward_lit_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_forward_lit"
	},
	
	"constant_colour":
	{
		"vs": "vs_main",
		"ps": "ps_constant_colour"
	},

	"gbuffer":
	{
		"vs": "vs_main",
		"ps": "ps_gbuffer"
	},
	
	"gbuffer_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_gbuffer"
	}
}


#include "libs/lighting.slib"
#include "libs/skinning.slib"

struct vs_output
{
	float4 position		: SV_POSITION;
	float4 world_pos 	: TEXCOORD0;
	float3 normal		: TEXCOORD1;
	float3 tangent		: TEXCOORD2;
	float3 bitangent	: TEXCOORD3;
	float4 texcoord		: TEXCOORD4;
};

struct vs_output_picking
{
	float4 position		: SV_POSITION;
	float4 index		: TEXCOORD0;
};

struct vs_input
{
	float4 position	 	: POSITION;
	float4 normal	 	: TEXCOORD0;
	float4 texcoord	 	: TEXCOORD1;
	float4 tangent	 	: TEXCOORD2;
	float4 bitangent	: TEXCOORD3;
};

struct vs_input_skinned
{
	float4 position	 		: POSITION;
	float4 normal	 		: TEXCOORD0;
	float4 texcoord	 		: TEXCOORD1;
	float4 tangent	 		: TEXCOORD2;
	float4 bitangent		: TEXCOORD3;
	float4 blend_indices	: TEXCOORD4;
	float4 blend_weights	: TEXCOORD5;
};

struct ps_output
{
	float4 colour : SV_Target;
};

struct ps_output_picking
{
	uint colour : SV_Target;
};

struct ps_output_multi
{
	float4 albedo : SV_Target0;
	float4 normal : SV_Target1;
};

cbuffer per_pass_view : register(b0)
{
	float4x4 vp_matrix;
	float4x4 view_matrix;
};

cbuffer per_draw_call : register(b1)
{
	float4x4 world_matrix;
	float4   user_data; //x = id, yzw = unused
};

struct forward_light
{
	float4 pos_radius;
	float4 colour;
};

cbuffer per_pass_lights : register(b3)
{
	forward_light lights[8];
};

declare_texture_samplers
{
	TEXTURE_2D( diffuse_texture, 0 );
	TEXTURE_2D( specular_texture, 1 );
	TEXTURE_2D( normal_texture, 2 );
};

vs_output vs_main_skinned( vs_input_skinned input )
{
	vs_output output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	float4 sp = skin_pos(input.position, input.blend_weights, input.blend_indices);
	
	output.position = mul( sp, wvp );
	output.world_pos = mul( input.position, world_matrix );
		
	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	float3x3 ws_rotation_matrix = to_3x3(world_matrix);
	
	rotation_matrix = ws_rotation_matrix;
	
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
	
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, input.texcoord.z, 1.0f - input.texcoord.w );
	
    return output;
}

vs_output vs_main( vs_input input )
{
	vs_output output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	output.position = mul( input.position, wvp );
	output.world_pos = mul( input.position, world_matrix );
		
	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	float3x3 ws_rotation_matrix = to_3x3(world_matrix);
		
	rotation_matrix = ws_rotation_matrix;
		
	output.normal = mul( input.normal.xyz, rotation_matrix );
	output.tangent = mul( input.tangent.xyz, rotation_matrix );
	output.bitangent = mul( input.bitangent.xyz, rotation_matrix );
	
	output.texcoord = float4( input.texcoord.x, 1.0f - input.texcoord.y, input.texcoord.z, 1.0f - input.texcoord.w );
	
    return output;
}

ps_output ps_forward_lit( vs_output input ) 
{	
	ps_output output;
	
	float4 albedo = SAMPLE_TEXTURE_2D( diffuse_texture, input.texcoord.xy );
	
	float3 n = input.normal.xyz;
	
	float3 lit_colour = float3( 0.0, 0.0, 0.0 );
	
	for( int i = 0; i < 8; ++i )
	{
		float3 l = normalize( lights[i].pos_radius.xyz - input.world_pos.xyz );
		lit_colour	+= 	lights[i].colour.rgb * dot( n, l );
	}
		
	output.colour.rgb = lit_colour;
	output.colour.a = albedo.a;
		
    return output;
}

ps_output_multi ps_gbuffer( vs_output input ) 
{	
	ps_output_multi output;
	
	output.albedo = SAMPLE_TEXTURE_2D( diffuse_texture, input.texcoord.xy );
	output.normal = float4( input.normal, 1.0 );
		
    return output;
}

pmfx:
{	
	"forward_lit":
	{
		"vs": "vs_main",
		"ps": "ps_forward_lit"
	},
	
	"forward_lit_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_forward_lit"
	},

	"gbuffer":
	{
		"vs": "vs_main",
		"ps": "ps_gbuffer"
	},
	
	"gbuffer_skinned":
	{
		"vs": "vs_main_skinned",
		"ps": "ps_gbuffer"
	}
}


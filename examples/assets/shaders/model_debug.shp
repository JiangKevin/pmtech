#include "libs/lighting.slib"

struct vs_output
{
	float4 position		: SV_POSITION;
	float4 world_pos 	: TEXCOORD0;
	float3 normal		: TEXCOORD1;
	float3 tangent		: TEXCOORD2;
	float3 bitangent	: TEXCOORD3;
	float4 texcoord		: TEXCOORD4;
};

struct vs_input
{
	float4 position	 	: POSITION;
	float4 normal	 	: TEXCOORD0;
	float4 texcoord	 	: TEXCOORD1;
	float4 tangent	 	: TEXCOORD2;
	float4 bitangent	: TEXCOORD3;
};

struct ps_output
{
	float4 colour : SV_Target;
};

cbuffer per_pass_view : register(b0)
{
	float4x4 vp_matrix;
	float4x4 view_matrix;
};

cbuffer per_draw_call : register(b1)
{
	float4x4 world_matrix;
};

cbuffer debug_options : register(b13)
{
	float4 debug_render_options;
};

declare_texture_samplers
{
	TEXTURE_2D( diffuse_texture, 0 );
	TEXTURE_2D( specular_texture, 1 );
	TEXTURE_2D( normal_texture, 2 );
};

vs_output vs_main( vs_input _input )
{
	vs_output _output;
	
	float4x4 wvp = mul( world_matrix, vp_matrix );

	_output.position = mul( _input.position, wvp );
	_output.world_pos = mul( _input.position, world_matrix );

	float3x3 rotation_matrix = mul( to_3x3(world_matrix), to_3x3(view_matrix) );
	
	_output.normal = mul( _input.normal.xyz, rotation_matrix );
	_output.tangent = mul( _input.tangent.xyz, rotation_matrix );
	_output.bitangent = mul( _input.bitangent.xyz, rotation_matrix );
	
	_output.texcoord = float4( _input.texcoord.x, 1.0f - _input.texcoord.y, _input.texcoord.z, 1.0f - _input.texcoord.w );
	
    return _output;
}

ps_output ps_main( vs_output _input ) 
{	
	ps_output _output;
		
	if( DEBUG_DIFFUSE_MAP )
	{
		_output.colour = SAMPLE_TEXTURE_2D( diffuse_texture, _input.texcoord.xy );
	}
	else if( DEBUG_SPECULAR_MAP )
	{
		_output.colour = SAMPLE_TEXTURE_2D( specular_texture, _input.texcoord.xy );
	}
	else if( DEBUG_NORMAL_MAP )
	{
		_output.colour = SAMPLE_TEXTURE_2D( normal_texture, _input.texcoord.xy );
	}
	else if( DEBUG_VERTEX_NORMALS )
	{
		_output.colour = float4( _input.normal, 1.0 );
	}
	else if( DEBUG_VERTEX_TANGENTS )
	{
		_output.colour = float4( _input.tangent, 1.0 );
	}
	else if( DEBUG_VERTEX_BITANGENTS )
	{
		_output.colour = float4( _input.bitangent, 1.0 );
	}
	else if( DEBUG_PER_PIXEL_NORMALS )
	{
		float3 normal_sample = SAMPLE_TEXTURE_2D( normal_texture, _input.texcoord.xy ).rgb;
	
		float3x3 tbn;
		tbn[0] = _input.tangent;
		tbn[1] = _input.bitangent;
		tbn[2] = _input.normal;
		
		float3 n = mul( tbn, normal_sample );
		
		_output.colour = float4( n.xyz, 1.0 );
	}
	else if( DEBUG_COOK_TORRENCE )
	{
		float3 normal_sample = SAMPLE_TEXTURE_2D( normal_texture, _input.texcoord.xy ).rgb;
		float3 diffuse_sample = SAMPLE_TEXTURE_2D( diffuse_texture, _input.texcoord.xy ).rgb;
		float3 specular_sample = SAMPLE_TEXTURE_2D( specular_texture, _input.texcoord.xy ).rgb;
		
		float3x3 tbn;
		tbn[0] = _input.tangent;
		tbn[1] = _input.bitangent;
		tbn[2] = _input.normal;
		
		float3 n = mul( tbn, normal_sample );
		 
		float3 lpos = mul( float3( 10.0, 10.0, 10.0 ), float3x3(view_matrix) );
		
		//float2 lighting = cook_torrence_point_light( float4( lpos, 100.0), float4( 0.0, 0.0, 0.0, 1.0), float4( n, 1.0 ), float4( 0.0, 0.1, 0.9, 0.0 ) );
		
		float2 lighting = phong_blinn_point_light( float4( lpos, 100.0), float4( 0.0, 0.0, 0.0, 1.0), float4( n, 1.0 ), float4( 5.0, 5.0, 0.0, 0.0 ) );
				
		_output.colour.rgb = (diffuse_sample.rgb * lighting.x) + lighting.y * specular_sample;
		
		_output.colour.a = 1.0;
	}
		
    return _output;
}
